// File generated by Pepinillo, If you edit this file, rename it and/or delete the .feature file that generates it.

namespace pepin;
#nullable enable
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Datagrove.Testing.Sample;

// /Users/jimhurd/dev/datagrove/testing/dotnet/template/ Datagrove.Testing.Sample/feature/Calc.feature
[TestClass()]
[TestCategory("pepin")]
public class Calculator
{
    public TestContext? TestContext { get; set; }

    public class Steps
    {
        internal Datagrove.Testing.Sample.CalculatorSteps calculatorSteps;

        public Steps(ScenarioState context)
        {
            calculatorSteps = new  Datagrove.Testing.Sample.CalculatorSteps();

        }

        public async Task initialize()
        {
            var step = this;
            step.calculatorSteps.I_have_a_calculator();


            await Task.CompletedTask;
        }
    }

    [TestMethod()]
    public async Task Add_two_numbers()
    {
        await using (var context = new ScenarioState(TestContext!))
        {

            var step = new Steps(context);
            await step.initialize();
            await step.calculatorSteps.I_have_and_as_input(1, 2);

            await step.calculatorSteps.I_add_more_numbers(GherkinTable.make(new string[] { "number" }, new string[] { "1", "2" }));

            step.calculatorSteps.I_should_get_an_output_of(6);

        }
    }
    [TestMethod()]
    public async Task Add_two_numbers__1()
    {
        await using (var context = new ScenarioState(TestContext!))
        {
            var step = new Steps(context);
            await step.initialize();
            await step.calculatorSteps.I_have_and_as_input(2, 3);

            await step.calculatorSteps.I_add_more_numbers(GherkinTable.make(new string[] { "number" }, new string[] { "1", "2" }));

            step.calculatorSteps.I_should_get_an_output_of(8);

        }
    }


}
